@startuml	
title "Class diagram - Actions"

interface EventTrigger {
 +setEventPublisher(EventPublisher)
}

interface ActionContext {
 +getGame(): Game
 +getBoard(): Board
 +getSourcePlayer(): Player
 +getSourceZone(): Zone
 +getSourceCoordinate(): Coordinate
 +getSourceCard(): Card
 +getTargetPlayer(): Player
 +getTargetZone(): Zone
 +getTargetCoordinate(): Coordinate
 +getTargetCard();: Card
}

interface Action extends EventTrigger {
 +perform(ActionContext): void
}

interface ActionContextFactory {
 +createContext(ActionContextTemplate): ActionContext
}

interface ActionExecutor {
 +execute(Action, ActionContextTemplate): void
}

abstract class PlayerTurnAction {
 +<b>perform(ActionContext): final void</b>
 #{abstract} performPlayerAction(ActionContext)
}

EventTrigger <|.. ActionExecutor

ActionExecutor *--> ActionContextFactory
ActionExecutor --> Action
Action --> ActionContext

Action <|.. SurrenderAction
Action <|.. PlayerTurnAction
PlayerTurnAction <|-- PutCardAction
PlayerTurnAction <|-- MoveCardAction
@enduml