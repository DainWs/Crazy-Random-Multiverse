@startuml
title "Class diagram - Domain model - Card"
!theme plain

abstract class Card {
 #name: String
 #description: String
 #Card(CardCode, name, description)
 +isType(CardType): boolean
 +getCode(): CardCode
 +{abstract} getType(): CardType
 +getName(): String
 +getDescription(): String
 +equals(Object): boolean
 +hashCode(): int
}

class CardCode {
 +CardCode(uid, CardType)
 +getCode(): double
 +getType(): CardType
 +isType(CardType): boolean
 +equals(Object): boolean
 +hashCode(): int
 +toString(): String
}

abstract class Combatant extends Card {
 #equipment: Equipment
 +receiveDamageFrom(Combatant): void
 +equip(Equipment): void
 +unequip(): void
 +isAlive(): boolean
 +getDamage(): Damage
 +getHealth(): Health
 +getArmor(): Armor
 +getEquipment(): Equipment
}

class Leader extends Combatant {}
class Warrior extends Combatant {
 +isRarity(WarriorRarity): boolean
 +getRarity(): WarriorRarity
}

enum WarriorRarity {
 +COMMON
 +UNCOMMON
 +RARE
 +EPIC
 +LEGENDARY
 +MITHIC
}

class Equipment extends Card {
 +getDamageValue(): double
 +getHealthValue(): double
 +getArmorValue(): double
}

class Spell extends Card {
 +getEffectId(): EffectId
}

class EffectId {
 +EffectId(long)
 +getNumber(): long
}

class Statistic {
 #value: double
 #Statistic(value)
 +getValue(): double
}

class Damage extends Statistic {
 +{static} NONE: Damage
 +{static} INFINITE: Damage
 +{static} newInstance(value, DamageType): Damage
 +isInfinite(): boolean
 +isType(DamageType): boolean
 +getType(): DamageType
}

class Health extends Statistic {
 +{static} INFINITE: Health
 +{static} newInstance(baseValue): Health
 +{static} newInstance(baseValue, maxValue): Health
 +getRemainingHealthAgainst(Damage): Health
 +isInfinite(): boolean
 +isZero(): boolean
 +getMaxValue(): double 
}

class Armor extends Statistic {
 +{static} NONE: Armor
 +{static} newInstance(value, ArmorType): Armor
 +canProtectAgainst(Damage): boolean
 +getRemainingArmorAgainst(Damage): Armor
 +getRemainingDamageAgainst(Damage): Damage
 +getType(): ArmorType
}

enum DamageType {
 +PHYSICAL
 +MAGIC
 +TRUE
}

enum ArmorType {
 +PHYSICAL
 +MAGIC
 +ArmorType(DamageType)
 +canProtectAgainst(DamageType): boolean
}

Card *--> CardCode
Combatant o--> Equipment
Combatant o---> "0..3" Statistic
Warrior *--> WarriorRarity
Spell *--> EffectId

Damage *--> DamageType
Armor *--> ArmorType

@enduml