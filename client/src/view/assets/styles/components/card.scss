@use 'sass:math';
@use '../mixins/cardSystem.scss' as *;

/*
$card-aspect-ratio-width: 1;
$card-aspect-ratio-height: 1.5;

$card-width: calc(18vh * $card-aspect-ratio-width);
$card-height: calc(18vh * $card-aspect-ratio-height);

$num-columns: calc(16 * $card-aspect-ratio-width);
$column-width: calc($card-width / $num-columns);
$num-rows: calc(16 * $card-aspect-ratio-height);
$row-height: calc($card-height / $num-rows);

.card {
  margin: 0;
  padding: 0;
  border: 1px solid black;
  border-radius: 0.6rem;
  width: $card-width;
  height: $card-height;

  position: relative;
  display: inline-block;
  cursor: pointer;
  transition: transform 0.3s ease-in-out;

  color: black;
  background-color: white;

  display: grid;
  grid-template-columns: repeat($num-columns, $column-width);
  grid-template-rows: repeat($num-rows, $row-height);

  font-size: 1.2vh;

  &--name,
  &--image,
  &--type {
    display: block;
  }

  $first-row: 1;
  $first-column: 1;

  &--name {
    grid-row-start: $first-row;
    grid-row-end: math.round(calc($first-row + calc($num-rows * 0.075)));
    grid-column-start: math.round(calc($num-columns / 4));
    grid-column-end: -(math.round(calc($num-columns / 4)));
  }

  &--image {
    grid-row-start: math.round(calc($first-row + calc($num-rows * 0.075)));
    grid-row-end: math.round(calc($first-row + calc($num-rows * 0.4)));
    grid-column-start: $first-column;
    grid-column-end: -$first-column;
  }

  &--type {
    $type-row: math.round(calc($first-row + calc($num-rows * 0.4)));
    grid-row-start: $type-row;
    grid-row-end: math.round(calc($type-row + calc($num-rows * 0.075)));
    grid-column-start: math.round(calc($num-columns / 4));
    grid-column-end: -(math.round(calc($num-columns / 4)));
  }

  &__details {
    $type-row: math.round(calc($first-row + calc($num-rows * 0.4)));
    grid-row-start: math.round(calc($type-row + calc($num-rows * 0.075)));
    grid-row-end: -$first-row;
    grid-column-start: math.round(calc($num-columns / 4));
    grid-column-end: -(math.round(calc($num-columns / 4)));
  }
*/

.card {
  // Aspect ratio configurable
  $width: 1;
  $height: 1.5;

  $cols: calc-columns($width);
  $rows: calc-rows($height);

  @include card-grid($width, $height);

  margin: 0;
  padding: 0;
  border: 1px solid black;
  border-radius: 0.6rem;

  position: relative;
  display: inline-block;
  cursor: pointer;
  transition: transform 0.3s ease-in-out;

  color: black;
  background-color: white;
  
  font-size: 1.2vh;

  &--name {
    display: block;
    @include card-section-name($cols, $rows);
  }

  &--image {
    display: block;
    @include card-section-image($cols, $rows);
  }

  &--type {
    display: block;
    @include card-section-type($cols, $rows);
  }

  &__details {
    @include card-section-details($cols, $rows);
  }

  &__tooltip {
    visibility: hidden;
    width: calc(20vh * $width);
    height: calc(20vh * $height);
    background-color: black;
    color: #fff;
    text-align: center;
    border-radius: 5px;
    padding: 5px 0;
    position: absolute;
    z-index: 1;
    left: 100%;
    opacity: 0;
    transition: opacity 0.3s;
  }

  &.leader {}

  &.equipment {}

  &.spell {}

  &.warrior {
    &.common {}

    &.uncommon {}

    &.rare {}

    &.epic {}

    &.legendary {}

    &.mithic {}
  }

  &:hover:not(.follow-mouse):not(.no-info) {
    &:active {
      opacity: 50;
    }
    &:not(:active) {
      z-index: 10000;
      transform: scale(1.2);

      .card__tooltip {
        visibility: visible;
        opacity: 1;
      }
    }
  }
}

.zone-slot {

  & .card {


    &:hover {
      cursor: grab;
    }
  }
}